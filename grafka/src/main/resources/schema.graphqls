schema {
    query: Query
    subscription: Subscription
    mutation: Mutation
}

type Query {
    clusters(clusterId: ID): [KafkaCluster]

    connect(connectId: ID): [KafkaConnect]

    consumerGroupListings(clusterId: ID!, partialConsumerGroupId: String, topicName: String): [KafkaConsumerGroupListing]!
    consumerGroupOffsets(clusterId: String!, groupId: String!): [KafkaOffset!]!

    schemaCompatibilityMode(clusterId: ID!, subject: String!): String!
    schemaMetadata(clusterId: ID!, subject: String!): KafkaSchemaRegistrySubjectMetadata
    schemaRegistry(clusterId: ID): KafkaSchemaRegistry
    schemaRegistryMode(clusterId: ID): String
    schemaRegistrySubjects(clusterId: ID!): [KafkaSchemaRegistrySubject]

    topicListings(clusterId: ID!, partialTopicName: String): [KafkaTopicListing]!
}

type Mutation {
    # Clusters
    newCluster(name: String!, config: String!): KafkaCluster!
    deleteCluster(clusterId: ID!): Boolean
    updateCluster(clusterId: String!, name: String!, config: String!): KafkaCluster!

    # Connect
    newConnect(name: String!, config: String!): KafkaConnect!
    deleteConnect(connectId: ID!): Boolean
    updateConnect(connectId: String!, name: String!, config: String!): KafkaConnect!
    saveConnector(connectId: String!, name: String!, connectorConfig: String!): String

    # Topics: Note, not returning TopicListing because topic can be confirmed before it is retrievable
    newTopicByPartitionAndReplicationFactor(clusterId: ID!, topicName: String!, partitionCount: Int!, replicationFactor: Int!, configs: [KafkaTopicConfig]): Boolean
    newTopicByReplicationAssignments(clusterId: ID!, topicName: String!, replicationAssignments: [KafkaReplicationAssignment!], configs: [KafkaTopicConfig!]): Boolean
}

type Subscription {
    messages(clusterId: ID!, topic:String!, keyDeserializer: String, valueDeserializer: String, latchSize:Int, latchTimeoutMs:Int, startingOffset:Long): [KafkaMessage!]!
}

type KafkaCluster {
    clusterId: ID!
    description: KafkaClusterDescription
    config: String!
    consumerGroupCount: Int!
    consumerGroupListings(partialConsumerGroupId: String): [KafkaConsumerGroupListing]!
    internalTopicCount: Int!
    name: String!
    schemaRegistry: KafkaSchemaRegistry
    topicListings(partialTopicName: String): [KafkaTopicListing!]!
    totalTopicCount: Int!
}

type KafkaConnect {
    connectId: ID!
    config: String!
    name: String!
    connectors: [KafkaConnector!]!
}

type KafkaConnector {
    name: String!
    status: KafkaConnectorStatus!
}

type KafkaConnectorStatus {
    name: String
    connector: KafkaConnectorStatusConnector
    tasks: [KafkaConnectorTask!]!
    type: String
}

type KafkaConnectorStatusConnector {
    state: String
    workerId: String
}

type KafkaConnectorTask {
    id: String
    state: String
    workerId: String
}

type KafkaClusterDescription {
    nodes: [KafkaNode]!
    controller: KafkaNode!
    authorizedOperations: [KafkaAclOperation!]!
}

type KafkaTopicListing {
    clusterId: ID!
    name: String!
    internal: Boolean!
    description: KafkaTopicDescription!
    configs: KafkaConfigCollection!
    consumerGroups(partialConsumerGroupId: String): [KafkaConsumerGroupListing!]!
    offsets: KafkaTopicOffsets!
    schema: KafkaSchemaRegistrySubject
}

type KafkaConsumerGroupListing {
    clusterId: ID!
    groupId: String!
    simpleConsumerGroup: Boolean!
    offsets: [KafkaOffset!]!
}

type KafkaOffset {
    partition: Int!
    topicName: String!
    leaderEpoch: Int
    metadata: String!
    offset: Int!
}

type KafkaTopicDescription {
    name: String!,
    internal: Boolean!,
    partitions: [KafkaTopicPartitionInfo]!
    authorizedOperations: [KafkaAclOperation!]!
}

type KafkaTopicPartitionInfo {
    partition: Int!
    leader: KafkaNode!
    replicas: [KafkaNode]!
    isr: [KafkaNode]!
}

type KafkaNode {
    id: Int!
    idString: String!
    host: String!
    port: Int!
    rack: String!
}

type KafkaMessage {
    topic: String!
    key: String
    value: String
    partition: Int!
    offset: Long!
    timestampType: String
    timestamp: Long
    leaderEpoch: Int
}

type KafkaSchemaRegistry {
    mode: String!
    subjects: [KafkaSchemaRegistrySubject!]!
}

type KafkaSchemaRegistrySubject {
    subject: String!
    metadata: KafkaSchemaRegistrySubjectMetadata
    compatibilityMode: String!
}

type KafkaSchemaRegistrySubjectMetadata {
    id: Int!
    version: Int!
    schema: String!
}

type KafkaAclOperation {
    code: String
    unknown: Boolean
}

type KafkaConfigCollection {
    resource: KafkaConfigResource!
    config: [KafkaConfigEntry]!
}

type KafkaConfigResource {
    name: String!
    default: Boolean!
    type: String!
}

type KafkaConfigEntry {
    default: Boolean!
    readOnly: Boolean!
    sensitive: Boolean!
    name: String!
    source: String!
    synonyms: [KafkaConfigSynonym]!
    value: String!
}

type KafkaConfigSynonym {
    name: String!
    value: String!
    source: String!
}

type KafkaTopicOffsets {
    partitionOffsets: [KafkaPartitionOffsets!]!
    offsetCount: Long!
    lifetimeOffsetCount: Long!
    partitionCount: Long!
    maxOffset: Long!
    minOffset: Long!
}

type KafkaPartitionOffsets {
    partition: Int!,
    beginningOffset: Long!,
    endOffset: Long!,
    offsetCount: Long!
}

input KafkaReplicationAssignment {
    partition: Int!,
    assignments: [Int!]!
}

input KafkaTopicConfig {
    name: String!,
    value: String!
}